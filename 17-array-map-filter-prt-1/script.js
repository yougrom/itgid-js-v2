// Array Map, Filter
// Map - создает новый массив заполняемый результатами вызова указанной функции для каждого элемента массива.
// Методы не изменяют исходный массив, а возвращают новый массив
// возвращает новый массив с результатом Операций
// 1 - let b — новый массив Куда будет складываться результат Операций
// 2 - a.map — метод массива который принимает callback функцию и возвращает новый массив
// 3 - callback функция — принимает три аргумента: текущий элемент, индекс текущего элемента и сам массив
// callback функция выполняется для каждого элемента массива и результат её выполнения записывается в новый массив b
// item - текущий элемент массива
// index - индекс текущего элемента
// array - сам массив
let a = [4, 5, 12, 200, 1, 0, -2, 'hello', 'hi'];
let b = a.map((item, index) => {
  console.log(index);
  console.log(item);
  return item * 2;
});
console.log(b);
// Входящие и выходящий массив одинаковый по длине

// let b = a.map((item, index) => item * 2);
// or
// let b = a.map(item => item * 2);
// console.log(b);
// Функция map хороша Нужно перебрать массив и выполнить над каждым элементом какую-то операцию и записать результат в новый массив

// Filter
// Filter - создает новый массив в который войдут только те элементы массива, которые удовлетворяют условию переданному в callback функции.
// callback Называют функция которая передается в качестве аргумента другой функции, и которая будет вызвана внутри этой функции
// true - элемент войдет в новый массив false - элемент не войдет в новый массив
let c = a.filter(function (item, index) {
  if (item % 2 === 0) {
    return true;
  }
});
console.log(c);

let d = a.filter(function (item, index) {
  if (typeof item === 'string') {
    console.log(index);
    console.log(item);
    return true;
  }
});
console.log(d);
// filter - хорош для фильтрации массива по какому-то условию
// map - хорош для преобразования массива И применить операции к элементам массива
